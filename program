#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <time.h>
#define SIZE 3
#define COMPUTER_MOVE 'O'
#define PLAYER_MOVE 'X'
char board[SIZE][SIZE];
void initialize_board() {
for (int i = 0; i < SIZE; i++) {
for (int j = 0; j < SIZE; j++) {
board[i][j] = '-';
}
}
}
void print_board() {
printf("\n-------------\n");
for (int i = 0; i < SIZE; i++) {
printf("| ");
for (int j = 0; j < SIZE; j++) {
printf("%c | ", board[i][j]);
}
printf("\n-------------\n");
}
}
bool is_board_full() {
for (int i = 0; i < SIZE; i++) {
for (int j = 0; j < SIZE; j++) {
if (board[i][j] == '-') {
return false;
}
}
}
return true;
}
bool is_winner_move(char player) {
for (int i = 0; i < SIZE; i++) {
if (board[i][0] == player && board[i][1] == player && board[i][2] == player) {
return true;
}
if (board[0][i] == player && board[1][i] == player && board[2][i] == player) {
return true;
}
}
if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
return true;
}
if (board[0][2] == player && board[1][1] == player && board[2][0] == player) {
return true;
}
return false;
}
bool game_over() {
return is_winner_move(PLAYER_MOVE) || is_winner_move(COMPUTER_MOVE) || is_board_full();
}
void get_player_move() {
int row, col;
printf("\nEnter row (1-3) and column (1-3) for your move (Player X): ");
scanf("%d %d", &row, &col);
row--;
col--;
if (row < 0 || row >= SIZE || col < 0 || col >= SIZE || board[row][col] != '-') {
printf("Invalid move. Try again.\n");
get_player_move();
} else {
board[row][col] = PLAYER_MOVE;
}
}
int minimax(bool is_maximizer) {
if (is_winner_move(PLAYER_MOVE)) return -1;
if (is_winner_move(COMPUTER_MOVE)) return 1;
if (is_board_full()) return 0;
int best_score = is_maximizer ? -1000 : 1000;
for (int i = 0; i < SIZE; i++) {
for (int j = 0; j < SIZE; j++) {
if (board[i][j] == '-') {
board[i][j] = is_maximizer ? COMPUTER_MOVE : PLAYER_MOVE;
int score = minimax(!is_maximizer);
if (is_maximizer) {
if (score > best_score) {
best_score = score;
}
} else {
if (score < best_score) {
best_score = score;
}
}
board[i][j] = '-';
}
}
}
return best_score;
}
void get_computer_move() {
int best_move_score = -1000;
int best_row = -1;
int best_col = -1;
for (int i = 0; i < SIZE; i++) {
for (int j = 0; j < SIZE; j++) {
if (board[i][j] == '-') {
board[i][j] = COMPUTER_MOVE;
int move_score = minimax(false);
board[i][j] = '-';
if (move_score > best_move_score) {
best_move_score = move_score;
best_row = i;
best_col = j;
}
}
}
}
board[best_row][best_col] = COMPUTER_MOVE;
}
int main() {
srand(time(NULL));
initialize_board();
printf("Welcome to Tic Tac Toe!\n");
printf("Do you want to go first? (Y/N): ");
char choice;
scanf(" %c", &choice);
bool player_turn = (choice == 'Y' || choice == 'y');
while (!game_over()) {
if (player_turn) {
print_board();
get_player_move();
} else {
get_computer_move();
}
player_turn = !player_turn;
}
print_board();
if (is_winner_move(PLAYER_MOVE)) {
printf("Congratulations! You win!\n");
} else if (is_winner_move(COMPUTER_MOVE)) {
printf("Computer wins!\n");
} else {
printf("It's a draw!\n");
}
return 0;
}
